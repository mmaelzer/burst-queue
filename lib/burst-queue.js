// Generated by CoffeeScript 1.3.3
(function() {
  var BurstQueue, exports;

  BurstQueue = (function() {
    var _availableCalls, _counter, _maxItems, _queue;

    _queue = new Array();

    _counter = 0;

    _maxItems = 0;

    _availableCalls = 0;

    function BurstQueue(period, itemsPerPeriod) {
      if (itemsPerPeriod != null) {
        _availableCalls = _maxItems = itemsPerPeriod;
      } else {
        _availableCalls = _maxItems;
      }
      setInterval(this.process, period);
    }

    BurstQueue.prototype.add = function(functions) {
      var fn, ids, _i, _len;
      if (Object.prototype.toString.apply(functions) === '[object Array]') {
        ids = new Array();
        for (_i = 0, _len = functions.length; _i < _len; _i++) {
          fn = functions[_i];
          if (_availableCalls > 0) {
            _availableCalls--;
            fn();
          } else {
            _queue.push({
              id: _counter,
              fn: fn
            });
          }
          ids.push(_counter++);
        }
        return ids;
      } else {
        if (_availableCalls > 0) {
          _availableCalls--;
          functions();
        } else {
          _queue.push({
            id: _counter,
            fn: functions
          });
        }
        return _counter++;
      }
    };

    BurstQueue.prototype.availableCalls = function() {
      return _availableCalls;
    };

    BurstQueue.prototype.clear = function() {
      _queue.length = 0;
      _availableCalls = _maxItems;
    };

    BurstQueue.prototype.counter = function() {
      return _counter;
    };

    BurstQueue.prototype.enqueued = function() {
      return _queue.length;
    };

    BurstQueue.prototype.process = function() {
      var index, _i, _ref;
      if (_queue.length < 1) {
        _availableCalls = _maxItems;
        return;
      }
      for (index = _i = 0, _ref = _queue.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
        _queue[index].fn();
        if ((index + 1) >= _maxItems) {
          break;
        }
      }
      _queue.splice(0, index + 1);
      if (index < _maxItems) {
        return _availableCalls = _maxItems - (index + 1);
      }
    };

    BurstQueue.prototype.remove = function(id) {
      var index, success, _i, _ref;
      if (_queue.length < 1) {
        return false;
      }
      success = false;
      for (index = _i = 0, _ref = _queue.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
        if (_queue[index].id === id) {
          success = true;
          break;
        }
      }
      if (success) {
        _queue.splice(index, 1);
      }
      return success;
    };

    return BurstQueue;

  })();

  exports = module.exports;

  exports.createQueue = function(period, functionsPerPeriod) {
    return new BurstQueue(period, functionsPerPeriod);
  };

}).call(this);
